" WhichKey Descriptions
let g:WhichKeyDesc_errors = "<leader>e Error navigation"
let g:WhichKeyDesc_errors_next = "<leader>en Go to next error in solution"
let g:WhichKeyDesc_errors_prev = "<leader>ep Go to previous error in solution"
let g:WhichKeyDesc_comment = "<leader>c Comment line"
let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"
let g:WhichKeyDesc_git = "<leader>g Git operations"
let g:WhichKeyDesc_git_commit = "<leader>gc Open Git commit dialog"
let g:WhichKeyDesc_git_status = "<leader>gs Open Git status dialog"
let g:WhichKeyDesc_git_branches = "<leader>gb Open Git branches list"

" Settings
set incsearch " Do incremental searching.
map Q gq " Don't use Ex mode, use Q for formatting.

" Plugins
Plug 'easymotion/vim-easymotion'
Plug 'preservim/nerdtree'

" General Settings
set linenumber 
set scrolloff=10
set showcmd
set visualbell
set ideajoin
set easymotion
set surround
set sneak
set ignorecase
set smartcase
set hlsearch
set highlightedyank
set notimeout
set which-key

" Leader key
let mapleader = " "

" Easymotion
map <Leader><Leader> <Plug>(easymotion-f)

" Zen Mode
nmap <c-z> :action ToggleDistractionFreeMode<CR>

" Navigation
nmap <Leader>h :action PreviousTab<CR>
nmap <Leader>l :action NextTab<CR>
nmap <c-\> :action SplitVertically<CR>
nmap <c--> :action SplitHorizontally<CR>
nmap <c-=> :action Unsplit<CR>
nmap <c-m> :action MoveEditorToOppositeTabGroup<CR>


" test
map! j <Down>
map! k <Up>

" Window Navigation
nmap <c-h> <c-w>h
nmap <c-l> <c-w>l
nmap <c-j> <c-w>j
nmap <c-k> <c-w>k

" NERDTree Navigation
" Commands:
"  Ctrl-n  Opens NERDTree window
"  q       Close the NERDTree window
"  o       Open files, directories and bookmarks
"  go      Open selected file, but leave cursor in NERDTree
"  <C-J>
"  <C-K>
"  R       Refresh directories
"  m       Show nerdtree menu
set NERDTree
map <c-n> :NERDTree<CR>
let g:NERDTreeMapActivateNode='j'
let g:NERDTreeMApJumpParent='k'
" :NERDTreeFocus
" :NERDTreeToggle
" :NERDTreeClose
" :NERDTreeFind
" :NERDTreeRefreshRoot

" Clipboard
set clipboard+=unnamed

" Custom Mappings
map <leader>am <action>(ShowIntentionActions)
map <leader>as <action>(SearchEverywhere)
map <leader>gc <Action>(CheckinProject)
map <leader>gs <Action>(ActivateVersionControlToolWindow)
map <leader>gb <Action>(Git.Branches)
map <leader>q <action>(CloseContent)
map <leader>c <action>(CommentByLineComment)
map <leader>en <Action>(ReSharperGotoNextErrorInSolution)
map <leader>ep <Action>(ReSharperGotoPrevErrorInSolution)

" Remap somethings:

" Tab navigation
nnoremap <A-n> :tabnext<CR>
nnoremap <A-p> :tabprev<CR>\

" Pane navigation
nnoremap <A-h> <C-w>h
nnoremap <A-l> <C-w>l
nnoremap <A-k> <C-w>k
nnoremap <A-j> <C-w>j

" Jump between methods
nnoremap [[ <Action>(MethodUp)
nnoremap ]] <Action>(MethodDown)

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

" Popup navigation # SO SEXYYYY!!!!
inoremap <C-j> <Action>(PopupMenu-selectNext)
inoremap <C-k> <Action>(PopupMenu-selectPrev)

" Window splits
map <leader>wv <Action>(SplitVertically)
map <leader>ws <Action>(SplitHorizontally)
map <leader>wu <Action>(Unsplit)
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)

" Refactoring
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

" Go to code
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gu <Action>(ShowUsages)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gf <Action>(Back)
nmap <leader>gb <Action>(Forward)
